code_name: 'GAMESS'
docker:
  image_name: 'mdi/gamess'


  build_image:
    # Install dependencies
    - apt-get update
    - apt-get install -y rsync csh wget groff curl git
    - apt-get install -y git vim libblas-dev liblapack-dev nvidia-cuda-toolkit valgrind

    - apt-get install -y patch nano make gcc gfortran cmake

    - pip install jinja2
    - pip install cmake
    - pip install pymdi
    - pip install mpi4py
    - pip install numpy

    # Install ftnchek
    - wget ftnchek-3.3.1.tar.gz https://www.dsm.fordham.edu/~ftnchek/download/ftnchek-3.3.1.tar.gz || true
    - tar -zxvf ftnchek-3.3.1.tar.gz
    - cd ftnchek-3.3.1
    - ./configure
    - make
    - make install

  build_engine:
    # Copy GAMESS source files into the build directory
    - mkdir -p build
    - |
      if [ ! -d "build/gamess" ] ; then
        rsync -a source/gamess build
        cd build/gamess
    
        # Ensure the line endings are lf
        git rm --cached -r .
        git reset --hard
        cd ../../
      fi
    - cd build/gamess

    # Prepare install.info
    - export GCC_MAJOR_VERSION=`gcc --version | grep ^gcc | sed 's/gcc (.*) //g' | grep -o '[0-9]\{1,3\}\.[0-9]\{0,3\}\.[0-9]\{0,3\}' | cut -d '.' -f 1`
    - export GCC_MINOR_VERSION=`gcc --version | grep ^gcc | sed 's/gcc (.*) //g' | grep -o '[0-9]\{1,3\}\.[0-9]\{0,3\}\.[0-9]\{0,3\}' | cut -d '.' -f 2`
    - export NUM_CPU_CORES=`grep -c ^processor /proc/cpuinfo`
    - python bin/create-install-info.py --fortran_version ${GCC_MAJOR_VERSION}.${GCC_MINOR_VERSION} --mdi --mpich --mpi --mpi_path /usr/lib/x86_64-linux-gnu/mpich

    # Generate the Makefile
    - export builddir=$(pwd)
    - echo "GMS_PATH = ${builddir}" > Makefile
    - echo "GMS_VERSION = 00" >> Makefile
    - echo "GMS_BUILD_PATH = ${builddir}" >> Makefile
    - echo "GMS_FC = gfortran" >> Makefile
    - echo "GMS_CC = gcc" >> Makefile
    - echo "GMS_MDI = true" >> Makefile
    - export GMS_MDI=true
    - echo 'include $(GMS_PATH)/Makefile.in' >> Makefile

    # Build LAPACK
    - ./tools/lapack/download-lapack.csh
    - make -j $NUM_CPU_CORES lapack

    # Build the MDI Library
    - ./tools/mdi/download-mdi.csh
    - make -j $NUM_CPU_CORES libmdi

    # Build DDI
    - make -j 1 ddi

    # Build GAMESS
    - make -j 1

    # Set path options in rungms
    - sed -i -z 's/set SCR=\n/set SCR=\/repo\/tests\/scratch\n/g' /repo/build/gamess/rungms
    - sed -i -z 's/set USERSCR=\n/set USERSCR=\/repo\/tests\/scratch\/userscr\n/g' /repo/build/gamess/rungms
    - sed -i -z 's/set GMSPATH=\n/set GMSPATH=\/repo\/build\/gamess\n/g' /repo/build/gamess/rungms

    # Set MPI options for rungms
    - sed -i -z 's/\nset TARGET=\n/\nset TARGET=mpi\n/g' /repo/build/gamess/rungms
    - sed -i 's/set DDI_MPI_CHOICE=impi/set DDI_MPI_CHOICE=mpich/g' /repo/build/gamess/rungms

    # Obtain a clone of LAMMPS
    - |
      if [ ! -d "/repo/build/lammps" ]; then
        git clone https://github.com/lammps/lammps.git /repo/build/lammps
      fi
    - LAMMPS_INSTALL='mpi'

    # Configure LAMMPS
    - |
      if [ ! -d "/repo/build/lammps/build" ]; then
        mkdir -p /repo/build/lammps/build
        cd /repo/build/lammps/build
        cmake -D PKG_RIGID=yes -D PKG_MOLECULE=yes -D PKG_KSPACE=yes -D PKG_MDI=yes -D BUILD_SHARED_LIBS=yes -D LAMMPS_MACHINE=mpi -DCMAKE_BUILD_TYPE=Debug ../cmake
      fi

    # Compile LAMMPS
    - cd /repo/build/lammps/build
    - make -j 4
    - cp lmp_mpi lmp_mdi
    - cp liblammps_mpi.so liblammps.so

  validate_engine:
    - echo "Starting GAMESS validate_engine script"
    - export USER=MDIMECHANIC

    - echo "Removing GAMESS scratch directory"
    - |
      if [ -d "/repo/tests/scratch" ] ; then
        rm -r /repo/tests/scratch
      fi

    - echo "Creating GAMESS scratch directory"
    - mkdir -p /repo/tests/scratch
    - mkdir -p /repo/tests/scratch/userscr

    # These files are created to ensure that the rungms script doesn't return a non-zero exit code
    - echo "Creating GAMESS scratch files"
    - cd /repo/tests/scratch
    - touch TEST-mdi.cube
    - touch TEST-mdi.grd
    - touch TEST-mdi.csv
    - touch /repo/tests/scratch/userscr/TEST.casino
    - touch /repo/tests/scratch/userscr/TEST.dmn
    - touch /repo/tests/scratch/userscr/TEST.cim
    - touch /repo/tests/scratch/userscr/TEST.cosmo
    - touch /repo/tests/scratch/userscr/TEST.pot
    - touch /repo/tests/scratch/userscr/TEST.gamma
    - touch /repo/tests/scratch/userscr/TEST.efp
    - touch /repo/tests/scratch/userscr/TEST.dip
    - touch /repo/tests/scratch/userscr/TEST.hs1
    - touch /repo/tests/scratch/userscr/TEST.hs2
    - touch /repo/tests/scratch/userscr/TEST.dat
    - touch /repo/tests/scratch/userscr/TEST.qmw
    - touch /repo/tests/scratch/userscr/TEST.rst
    - touch /repo/tests/scratch/userscr/TEST.trj

    - cp /repo/build/gamess/install.info /install.info
    - export GMSPATH=/repo/build/gamess

    - echo "Running a test calculation"
    - cd /repo/tests/validate_engine
    - mpiexec -n 1 csh -e ../../build/gamess/rungms TEST.inp 00 2 2 > TEST.log 2> TEST.err


report:
  prepend:
    - "## Usage Instructions"
    - 
    - This repo does not include a distribution of the GAMESS software package; users must acquire the source code of GAMESS seperately.
    - The GAMESS source code must then be copied into a `source/gamess` subdirectory within this repository.
    - Afterwords, the repo can be built using the `mdimechanic build` and `mdimechanic report` commands.

engine_tests:
  # Provide at least one example input that can be used to test your code's MDI functionality
  script:
    - echo "Insert commands to run an example calculation here"
    - export USER=MDIMECHANIC
    - |
      if [ -d "tests/scratch" ] ; then
        rm -r tests/scratch
      fi
    - mkdir -p tests/scratch
    - mkdir -p tests/scratch/userscr

    # These files are created to ensure that the rungms script doesn't return a non-zero exit code
    - cd tests/scratch
    - touch TEST-mdi.cube
    - touch TEST-mdi.grd
    - touch TEST-mdi.csv
    - touch /repo/tests/scratch/userscr/TEST.casino
    - touch /repo/tests/scratch/userscr/TEST.dmn
    - touch /repo/tests/scratch/userscr/TEST.cim
    - touch /repo/tests/scratch/userscr/TEST.cosmo
    - touch /repo/tests/scratch/userscr/TEST.pot
    - touch /repo/tests/scratch/userscr/TEST.gamma
    - touch /repo/tests/scratch/userscr/TEST.efp
    - touch /repo/tests/scratch/userscr/TEST.dip
    - touch /repo/tests/scratch/userscr/TEST.hs1
    - touch /repo/tests/scratch/userscr/TEST.hs2
    - touch /repo/tests/scratch/userscr/TEST.dat
    - touch /repo/tests/scratch/userscr/TEST.qmw
    - touch /repo/tests/scratch/userscr/TEST.rst
    - touch /repo/tests/scratch/userscr/TEST.trj
    - cd ../../

    - cp /repo/build/gamess/install.info /install.info
    - export GMSPATH=/repo/build/gamess

    - cd tests/validate_engine
    #- mpiexec -n 1 csh -e ../../build/gamess/rungms -mdi "${MDI_OPTIONS}" TEST.inp 00 2 2 > TEST.log 2> TEST.err
    - export GAMESS_MDI_OPTIONS="${MDI_OPTIONS}"
    - mpiexec -n 1 csh -e ../../build/gamess/rungms TEST.inp 00 2 2 > TEST.log 2> TEST.err


test_drivers:
  mytest:
    script:
      - cd tests/drivers/mytest
      - python mytest.py

      # Output data from the engine
      #- cd ../../../tests/validate_engine
      #- echo "==================== ENGINE OUTPUT ===================="
      #- cat TEST.log
      #- echo "======================================================="

run_scripts:




  test:
    containers:
      container1:
        image: 'mdi/gamess'
        script:
          - echo "Insert commands to run an example calculation here"
          - export USER=MDIMECHANIC
          - |
            if [ -d "tests/scratch" ] ; then
              rm -r tests/scratch
            fi
          - mkdir -p tests/scratch
          - mkdir -p tests/scratch/userscr

          # These files are created to ensure that the rungms script doesn't return a non-zero exit code
          - cd tests/scratch
          - touch TEST-mdi.cube
          - touch TEST-mdi.grd
          - touch TEST-mdi.csv
          - touch /repo/tests/scratch/userscr/TEST.casino
          - touch /repo/tests/scratch/userscr/TEST.dmn
          - touch /repo/tests/scratch/userscr/TEST.cim
          - touch /repo/tests/scratch/userscr/TEST.cosmo
          - touch /repo/tests/scratch/userscr/TEST.pot
          - touch /repo/tests/scratch/userscr/TEST.gamma
          - touch /repo/tests/scratch/userscr/TEST.efp
          - touch /repo/tests/scratch/userscr/TEST.dip
          - touch /repo/tests/scratch/userscr/TEST.hs1
          - touch /repo/tests/scratch/userscr/TEST.hs2
          - touch /repo/tests/scratch/userscr/TEST.dat
          - touch /repo/tests/scratch/userscr/TEST.qmw
          - touch /repo/tests/scratch/userscr/TEST.rst
          - touch /repo/tests/scratch/userscr/TEST.trj
          - cd ../../

          - cp /repo/build/gamess/install.info /install.info
          - export GMSPATH=/repo/build/gamess

          - cd tests/validate_engine
          - mpiexec -n 1 csh -e ../../build/gamess/rungms TEST.inp 00 2 2 > TEST.log 2> TEST.err



  independent:
    containers:
      container1:
        image: 'mdi/gamess'
        script:
          - echo "Insert commands to run an example calculation here"
          - export USER=MDIMECHANIC
          - |
            if [ -d "tests/scratch" ] ; then
              rm -r tests/scratch
            fi
          - mkdir -p tests/scratch
          - mkdir -p tests/scratch/userscr

          # These files are created to ensure that the rungms script doesn't return a non-zero exit code
          - cd tests/scratch
          - touch TEST-mdi.cube
          - touch TEST-mdi.grd
          - touch TEST-mdi.csv
          - touch /repo/tests/scratch/userscr/TEST.casino
          - touch /repo/tests/scratch/userscr/TEST.dmn
          - touch /repo/tests/scratch/userscr/TEST.cim
          - touch /repo/tests/scratch/userscr/TEST.cosmo
          - touch /repo/tests/scratch/userscr/TEST.pot
          - touch /repo/tests/scratch/userscr/TEST.gamma
          - touch /repo/tests/scratch/userscr/TEST.efp
          - touch /repo/tests/scratch/userscr/TEST.dip
          - touch /repo/tests/scratch/userscr/TEST.hs1
          - touch /repo/tests/scratch/userscr/TEST.hs2
          - touch /repo/tests/scratch/userscr/TEST.dat
          - touch /repo/tests/scratch/userscr/TEST.qmw
          - touch /repo/tests/scratch/userscr/TEST.rst
          - touch /repo/tests/scratch/userscr/TEST.trj
          - cd ../../

          - cp /repo/build/gamess/install.info /install.info
          - export GMSPATH=/repo/build/gamess

          - cd /repo/tests/gamess_lammps
          - mpiexec -n 1 csh -e ../../build/gamess/rungms TEST.inp 00 2 2 > TEST.log 2> TEST.err


          - ENGINE_EXECUTABLE="build/lammps/build/lmp_mdi"
          - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/repo/build/lammps/src
          - cd /repo/tests/engine_validation
          - ../../${ENGINE_EXECUTABLE} -in lammps.in > lammps.out
          - echo "Test output:"
          - cat lammps.out





  lammps:
    containers:
      container1:
        image: 'mdi/gamess'
        script:
          - echo "Insert commands to run an example calculation here"
          - export USER=MDIMECHANIC
          - |
            if [ -d "tests/scratch" ] ; then
              rm -r tests/scratch
            fi
          - mkdir -p tests/scratch
          - mkdir -p tests/scratch/userscr

          # These files are created to ensure that the rungms script doesn't return a non-zero exit code
          - cd tests/scratch
          - touch TEST-mdi.cube
          - touch TEST-mdi.grd
          - touch TEST-mdi.csv
          - touch /repo/tests/scratch/userscr/TEST.casino
          - touch /repo/tests/scratch/userscr/TEST.dmn
          - touch /repo/tests/scratch/userscr/TEST.cim
          - touch /repo/tests/scratch/userscr/TEST.cosmo
          - touch /repo/tests/scratch/userscr/TEST.pot
          - touch /repo/tests/scratch/userscr/TEST.gamma
          - touch /repo/tests/scratch/userscr/TEST.efp
          - touch /repo/tests/scratch/userscr/TEST.dip
          - touch /repo/tests/scratch/userscr/TEST.hs1
          - touch /repo/tests/scratch/userscr/TEST.hs2
          - touch /repo/tests/scratch/userscr/TEST.dat
          - touch /repo/tests/scratch/userscr/TEST.qmw
          - touch /repo/tests/scratch/userscr/TEST.rst
          - touch /repo/tests/scratch/userscr/TEST.trj
          - cd ../../

          - cp /repo/build/gamess/install.info /install.info
          - export GMSPATH=/repo/build/gamess

          - cd /repo/tests/gamess_lammps

          # Launch GAMESS
          - mpiexec -n 1 csh -e ../../build/gamess/rungms TEST.inp 00 2 2 -mdi "-method TCP -role ENGINE -name QM -hostname localhost -port 8021" > TEST.log 2> TEST.err &

          # Launch LAMMPS
          - ../../build/lammps/build/lmp_mdi -mdi "-method TCP -role DRIVER -name driver -port 8021" -in lammps.in > lammps.out
          - echo "Test output:"
          - cat lammps.out





  test_old:
    containers:
      container1:
        image: 'mdi/gamess'
        script:
          - echo "Insert code that will confirm that your code has been built successfully"
          - export USER=MDIMECHANIC
          - |
            if [ -d "tests/scratch" ] ; then
              rm -r tests/scratch
            fi
          - mkdir -p tests/scratch
          - mkdir -p tests/scratch/userscr

          # These files are created to ensure that the rungms script doesn't return a non-zero exit code
          - cd tests/scratch
          - touch TEST-mdi.cube
          - touch TEST-mdi.grd
          - touch TEST-mdi.csv
          - cd ../../

          - cd tests/validate_engine
          - mpiexec -n 1 csh -e ../../build/gamess/rungms TEST.inp 00 2 2 > TEST.log 2> TEST.err

